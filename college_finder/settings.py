"""
Django settings for college_finder project.
Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
import os
import dj_database_url # For database URL parsing
# Consider using python-dotenv for local development secrets:
# import dotenv 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Load environment variables if using dotenv for local dev ---
# dotenv_path = os.path.join(BASE_DIR, '.env')
# if os.path.exists(dotenv_path):
#     dotenv.load_dotenv(dotenv_path)

# --- SECURITY WARNING: Secret Key ---
# Load SECRET_KEY from environment variable. 
# Provide a default ONLY for local development IF NOT using dotenv.
# For Render, the environment variable MUST be set.
SECRET_KEY = os.environ.get('SECRET_KEY', '!!!insecure-default-key-for-dev-only!!!')

# --- SECURITY WARNING: DEBUG ---
# Load DEBUG from environment variable (e.g., 'False' in production)
# Default to True ONLY for local development.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' 

# --- Allowed Hosts ---
# Render automatically adds its domain. Add custom domains if needed.
# For local dev, you might add '127.0.0.1', 'localhost'
ALLOWED_HOSTS = ['.onrender.com'] 
# Example for adding local dev hosts if DEBUG is True:
# if DEBUG:
#     ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])


# --- Security Settings (for Production with HTTPS) ---
# Only enable these if DEBUG is False (i.e., in production on Render)
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    # Optional but recommended HSTS settings:
    # SECURE_HSTS_SECONDS = 31536000 # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', # Needed for WhiteNoise

    # My Apps
    'colleges.apps.CollegesConfig',
    'users.apps.UsersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise middleware - correct position
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'college_finder.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'college_finder.wsgi.application'


# Database Configuration using dj_database_url
# Reads DATABASE_URL environment variable set by Render.
# Falls back to SQLite for local development if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{os.path.join(BASE_DIR, 'db.sqlite3')}",
        conn_max_age=600 # Optional: connection pooling
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Change to 'Asia/Kolkata' if specific timezone is needed
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images) handled by WhiteNoise
STATIC_URL = 'static/'
# Where collectstatic will gather files for deployment
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Tell Django where to find static files in development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# WhiteNoise Storage (Django 4.2+)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# If using Django < 4.2, use this instead:
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User-uploaded images)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Or use a cloud storage backend

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Authentication Settings ---
LOGIN_URL = 'login'          # URL *name* of the login page
LOGIN_REDIRECT_URL = 'home'  # URL *name* to redirect to after successful login
LOGOUT_REDIRECT_URL = 'home' # URL *name* to redirect to after logout


# --- Email Configuration ---
# Use Console Backend (Recommended for Development/Render Free Tier)
# Prints emails to the console/logs instead of sending real ones.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' 

# --- OR --- 
# Configure SMTP Backend (If you need to send real emails)
# Ensure EMAIL_HOST_PASSWORD is set as an environment variable on Render!
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'mailsahu321@gmail.com' # Your Gmail address
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD') # Load from env var ONLY
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Set the default 'from' address

# --- Define Admins to Receive Feedback Emails ---
ADMINS = [
    ('Saransh Sahu', 'mailsahu321@gmail.com'), # Replace with your name and email
    # ('Another Admin', 'another@example.com'),
]
MANAGERS = ADMINS # Usually the same as ADMINS

# Ensure DEFAULT_FROM_EMAIL is set if using SMTP
# if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
#     DEFAULT_FROM_EMAIL = EMAIL_HOST_USER